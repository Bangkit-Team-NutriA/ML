# -*- coding: utf-8 -*-
"""Effnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/186wVj2D2mwMjaUyqVmKo5FRm4dpl2MeJ
"""

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

!unzip "/content/drive/MyDrive/datasetFoodImage/images.zip" -d "/content/sample_data/data"

import json
import os
import tensorflow as tf
from google.colab import files
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout, BatchNormalization
from tensorflow.keras import Sequential, Input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, Callback
from tensorflow_hub import KerasLayer
from tensorflow.keras.metrics import Precision,Recall
import math

model = tf.keras.models.load_model('/content/drive/MyDrive/models/EffnetWithAugmentDense+_05_0.63.h5', custom_objects={'KerasLayer': KerasLayer})

model.compile(optimizer='Adam', loss="categorical_crossentropy", metrics=["accuracy", Precision(), Recall()])

model.summary()

datagen = ImageDataGenerator(
    rotation_range=90,
    zoom_range=0.3,
    horizontal_flip=True,
    width_shift_range=0.1,
    height_shift_range=0.1,
    rescale = 1./255,
    validation_split=0.1)

valdatagen = ImageDataGenerator(
    rescale = 1./255,
    validation_split=0.1)

train_data_generator = datagen.flow_from_directory(
    "/content/sample_data/data/images",
    target_size=(250,250),
    seed=123,
    subset='training'
)

valid_data_generator = valdatagen.flow_from_directory(
    "/content/sample_data/data/images",
    seed = 123,
    target_size=(250,250),
    subset='validation'
)

checkpoint = ModelCheckpoint("/content/drive/MyDrive/models/EffnetWithAugmentDense+_{epoch:02d}_{accuracy:.2f}.h5", verbose=1, mode='auto', save_freq=2846)

class myCallback(Callback):
  def on_epoch_end(self, epoch, logs={}):
    path = '/content/drive/MyDrive/models/trainingHistoryEfficientNetDense+.json'
    with open(path) as f:
      data = json.load(f)
    os.remove(path)
    dictLogs = {
        'loss': logs.get('loss'),
        'accuracy': logs.get('accuracy'),
        'val_loss': logs.get('val_loss'),
        'val_accuracy': logs.get('val_accuracy'),
        'val_precision': logs.get('val_precision'),
        'val_recall': logs.get('val_recall'),
        'recall': logs.get('recall'),
        'precision': logs.get('precision')
    }
    data.append(dictLogs)
    json_object = json.dumps(data, indent = 4)
    with open(path, "w") as outJson:
      outJson.write(json_object)

callbacks = myCallback()

model.fit(train_data_generator, validation_data=valid_data_generator, epochs=5,callbacks=[checkpoint, callbacks])